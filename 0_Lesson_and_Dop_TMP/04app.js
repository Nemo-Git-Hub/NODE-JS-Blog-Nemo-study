const fs = require("fs"); // подключаем модуль fs используя директиву require

// Получение доступа к файлу 4test.txt и прочтение его содержимого:
fs.readFile("./4test.txt", "utf8", (error, data) => {
  // используем метод .readFile(аргументы: 1 - путь до файла, 2 - callback или обычная функция, которая сработает, когда мы выберем метод. Она принимает 2 аргумента: error - этообъект ошибки, который будет содержать всю информацию о возникшей проблеме, если вдруг чтение файла произвести не удалось, data - это данные, которые мы получаем при чтении). readFile - это асинхронная функция. Для выведения данных в консоль достаточно написать: console.log(data); - для получения буфера или console.log(data.toString()); - для получения строк (либо указать в аргументах utf8 и использовать 1-й вариант)
  fs.mkdir("./files", () => {}); // создаем папку, в которую хотим поместить новый файл (путь до создаваемой папки и callback)

  //   Создадим новый файл test2.txt, который будет содержать те же данные, т.е. по сути являться копией файла 4test.txt. Для этого ВНУТРИ метода .readFile добавим метод .writeFile, который принимает 3 аргумента: 1-путь по которому будет создан новый файл и его имя, 2-данные, которые будут записаны, 3-callback функция
  fs.writeFile("./files/test2.txt", `${data} New text!`, (error) => {
    error ? console.log(error) : null; // если есть ошибка(?)=(Да) - выводим в консоль, иначе (:)
  });
});

setTimeout(() => {
  //создаем таймер на 4 сек., чтобы успеть видеть процесс))
  if (fs.existsSync("./files/test2.txt")) {
    //метод проверяет существует ли файл
    fs.unlink("./files/test2.txt", (error) => {
      //метод удаления файла
      error ? console.log(error) : null;
    });
  }
}, 4000);

setTimeout(() => {
  if (fs.existsSync("./files")) {
    //метод проверяет существует ли папка
    fs.rmdir("./files", (error) => {
      //метод удаления папки
      error ? console.log(error) : null;
    });
  }
}, 6000);
