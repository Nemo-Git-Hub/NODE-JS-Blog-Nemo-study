// Node.js #9 Создание базового роутинга (Create Base Routing)
// 09-0app.js

// Серверный РОУТИНГ или маршрутизация - логика, котрая позволет пользователю передвигаться по сайту.
//Она может быть нативная (когда в html-документ добавляем ссылку на внутреннюю страницу и при клике прользователь получает к ней доступ) и эмулированная (использование Singl Page Application - вместо стандартного перехода на новую страницу будет выполнен рендеринг нового компонента, но визуально это будет выглядеть именно как переход на новую страницу)

//Задача: создать серверный роутинг, при котором при переходе по url-адресу будем возвращать новую разметку (т.е. одну из статичных страниц)

const http = require("http"); // импортируем http-модуль в наш js-файл
const fs = require("fs"); // подключаем модуль файловой системы для работы с файлами, которые мы будет возвращать в браузер
const path = require("path"); // подключаем модуль path для помощи в формировании корректного пути

const PORT = 3000;

const server = http.createServer((req, res) => {
  console.log("Server request");

  res.setHeader("Content-Type", "text/html"); //поскольку работать будем с разметкой, то Content-Type, определяем как html

  // для примера: при обращении на корневой роут (обычный /) будем возвращать сраницу index.html
  // примерно это тмеханиз мы будем использовать для нашего роутинга, т.е. определяем какой url-адрес прилетает в запросе, и в зависимости от этого возвращаем нужную страницу

  if ((req.url = "/")) {
    // создаем условие в котором будем проверять адрес приходящего запроса
    fs.readFile("./views/index.html", (err, data) => {
      // читаем файл index.html и после прочтения внутри callback-функции вернуть его в ответ
      if (err) {
        // кейс обработки ошибки: если что-то пойдет не так, мы получим в терминале сообщение об ошибке и остановим чтение файла
        console.log(err);
        res.end(); // записывает и в кейсе ошибки и ответа. ВСЕГДА нужно завершать ответ, чтобы вернуть контроль браузеру
      } else {
        // в случае успеха в ответ записываем прочитанную разметку и возвращаем ее браузеру
        res.write(data);
        res.end(); // записывает и в кейсе ошибки и ответа. ВСЕГДА нужно завершать ответ, чтобы вернуть контроль браузеру
      }
    }); // далее, используя файловую систему нам нужно прочитать файл index.html и после прочтения, внутри callback-функции, вернуть его в ответ
  }
});

server.listen(PORT, "localhost", (error) => {
  error ? console.log(error) : console.log(`listening port ${PORT}`);
});
