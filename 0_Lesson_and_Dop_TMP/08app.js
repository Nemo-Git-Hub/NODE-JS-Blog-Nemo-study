// Node.js #8 Создание сервера (Create Server) с помощью http-модуля

const http = require("http"); // импортируем модуль http в наш js файл
const { request } = require("https");

const PORT = 3000; // Сделали минимальный рефакторинг - вынесли PORT в отдельную константу и обновили эти данные в методе .listen (находится ниже)

// создем сервер, используя встроенный метод .createServer. В качестве аргумента метод принимает callback-функцию, которая будет вызываться каждый раз, когда к серверу идет какое-то обращение
const server = http.createServer((req, res) => {
  // сама функция принимает 2 аргумента - это объекты запроса и ответа (отклика). request - хранит информацию, которую мы можем использовать в нашем сервере (в будущем мы будем брать url-адресс, который приходит в запросе и на основании него отправлять нужные данные или страницу), а response - объект который мы будем формировать и отправлять в браузер
  console.log("Server request"); // каждый раз когда к серверу идет обращение - выводим сообщение в консоль
  console.log(req.url, req.method); //  выведет информацию о запрашиваемом пути и методе
  // console.log(req); // увидим в консоли что из себя представляет весь объект request

  // Для передачи вспомогательной информации, с которой мы можем взаимодействовать в бразере, служит ХЭДЭР ответа. Чтобы в него записать какие-то данные используем метод .setHeader

  // res.setHeader('Content-Type', 'text/plain'); //передаем информацию о возвращаемом типе контента, т.е. обычный текст
  // res.setHeader('Content-Type', 'text/html'); //передаем информацию о возвращаемом типе контента, т.е. текст html
  res.setHeader("Content-Type", "application/json"); ///передаем информацию о возвращаемом типе контента, т.е. формат application/json

  // Для возврата серверу что-то в ответ используем объект response. Здесь есть ДВА основных метода: .write - с его помощью записываем какой-то ответ. Использовать метод .write можно сколько угодно раз, главное, чтобы это было ДО метода .end
  // .end - сообщает о том, что все нужные данные были добавлены в ответ, который отправляется и контроль можно возвращать браузеру. (Ответ сформирован и готов для отправки в браузер)

  // res.write('<head><link rel="stylesheet" href="#"></head>'); // передаем подключение стилей в браузер

  // res.write('<h1>Hello world!</h1>');
  // res.write('<p>Hy! My name is Oleh</p>');

  const data = JSON.stringify([
    //создали небольшой массив, в котором 2 объекта с именем и возрастом, который "оборачиваем" в JSON.stringify, т.к. по результату нам должен прийти JSON-формат
    { name: "Tommy", age: 35 },
    { name: "Arthur", age: 40 },
  ]);

  // res.end();
  res.end(data); //поскольку мы передаем данные, а не разметку, то созданный JSON передаем напрямую в метод .end
});

// указываем порт, который будет "слушать" сервер. По стандарту это порт 3000. Для прослушивания применяется метод .listen. Он принимает 3 аргумента: 1 - порт, 2 - имя хоста (localhost - значение по умолчанию), 3 - callback, внутри которого мы добавим консоль для вывода информации о том, что слушаем определенный порт, а также если произойдет ошибка - мы будем о ней знать
server.listen(PORT, "localhost", (error) => {
  // указываем порт, который будет "слушать" наш сервер.
  error ? console.log(error) : console.log("listening port ${PORT}"); // ошибка ? "Да" : "Нет" // условие ? что делать если "Да" : что делать если "Нет"
});
