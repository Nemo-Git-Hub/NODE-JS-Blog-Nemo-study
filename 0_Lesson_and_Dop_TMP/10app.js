Node.js #10 Пакетный менеджер (NPM & Packages)

const { lookupService } = require("dns")

NPM - Node Packet Manager - коллекция пакетов или модулей, которые используются при разработке.Manager
Пакет - один или несколько JavaScript - файлов, представляющих собой какую - то библиотеку или инструмент(готовый блок функциональности, который можно использовать в своем проекте)

Для установки - команда npm init из папки, где планируется развернуть проект и ответить на несколько вопросов:

package name: (js) - название проекта
version: (1.0 .0) - версия(можно пустое)
description: -описание(можно пустое)
entry point: (app.js) - точка входа(корневой файл проекта с которого предполагается запуск)
test command: -командя для запуска тестов(можно пустое)
git repository: -путь к гиту, если есть
keywords: -ключевые слова
auyhor: -автортсво
license: (ISC) - лицензия
и еще раз подтвердить ОК
Результатом - появится ключеовй файл любого проекта в WEB - разработке package.jso, в котором можно добавить или изменить то, что ввели на этапе инициализации проекта

КАК ДОБАВИТЬ СТОРОННИЙ МОДУЛЬ В проект

Сначала нужно знать для решения какой проблемы нужно добавить модуль
nodemon - сам останавливает и перезапускает сервер, чтобы не делать это вручную каждый раз при внесении изменений.

Все пакеты можно устанавливать глобально на компьютер(данный пакет будет доступен для всех проектов, которые у меня есть.С другой стороны на компьютере появится ОГРОМНАЯ папка в которой постоянно будут накапливаться модули.При этом модули периодически обновляются и иногда может получиться, что новая версия модуля не поддерживает что - то из пердыдущей и у нас есть несколько проектов, которые используют разные версии.И вот тут начинаются проблемы.), а можно устанавливать локально в проект с добавлением зависимости в packet.json(для работы используют локальную установку с добавлением зависимости в packet.json, к тому же, без данной зависимости данный проект не возможно будет запустить на других компьютерах, а только на своем локальном)
2 - й вариант команда: npm install --save-dev nodemon
После установки в package.json появится новое поле "devDependencies" (здесь появляются зависимости, которые требуются для разработки)

в папке dependencies будут появляться зависимости, без которых наш проект не будет работать

Просто установить модуль не достаточно.Его нужно начать использовать.Как ? Читайте в документации.
В нашем случае, нужно создать отдельный скрипт и присвоить ему команду запуска сервера:
"scripts": {
    "dev": "nodemon app.js" // "dev" - имя команды, app.js будет запускаться с помощью пакета nodemon 
},
    теперь запустить сервер можно командой:
    npm run dev
и чтобы в терминале видеть что все работает в createServer добваляем:
    console.log('Just for Test');
и в терминале после обновления браузера мы будем видеть 2 строки: )

после того как установили модуль он сам и все его зависимости будут храниться в папке node_modules

Также появится файл
package-lock.json
он нужен для синхронизации всех версий пакетов на разных компьютерах, чтобы все версии пакетов были одинаковые у всех кто разрабатывает командой

И еще 2 модуля, которые понадобятся в будущих уроках - команда:

    npm i express ejs

express - node js framework, для более элегантной работы с запросами и ответами

ejs - шаблонизатор для добавления динамических данных на наш сайт и позволит рендерить их на UI