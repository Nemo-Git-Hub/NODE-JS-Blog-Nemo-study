// Node.js #13 Промежуточное ПО (Middleware)
// промежуточная функциональность, промежеточное ПО, некая логика, которая может быть добавлена в основной поток программы и которая может добавлять функциональность
//  когда сервер получает request (запрос), то в Response (отклике) можно добавить одну или несколько функций, которые будут выполнять дополнительную обработку (установка заголовков, работа с куками, шифрование, логирование, сжатие и т.д.)
// самый популярный вариант промежуточного ПО  - это регистрация 
// Middleware - это функция, которая исполняется между (после) получением запроса серверу и (перед) возвратом ответа браузеру

//Рассмотрим пример ЛОГИРУЮЩЕГО Middleware - 01:17
// берем наше приложение и используем метод .use в который передаем callback - см. ниже
const express = require('express');
const path = require('path');
const morgan = require('morgan')

const app = express();

app.set('view engine', 'ejs');

const PORT = 3000;

const createPath = (page) => path.resolve(__dirname, 'ejs-views', `${page}.ejs`);

app.listen(PORT, (error) => {
        error ? console.log(error) : console.log(`listening port ${PORT}`);
    }) /

    // берем наше приложение и используем метод .use в который передаем callback
    // app.use((req, res, next) => { // особенность данной функции в том, что она будет принимать 3 аргумента: запроса, отклика и доп.функции next()
    //     console.log(`path: ${req.path}`); // выводит информацию о пути запроса
    //     console.log(`method: ${req.method}`); // выводит информацию о методе запроса
    //     next(); // должна быть добавлена в самом конце для возврата контроля серверу, для дальнейшей работы с ответом 
    // })
    // такоим образом, мы можем добавить любое количество обработчиков и передавать им управление по цепочке

    // Так как Middleware должны определяться между запросом и откликом, то они должны располагаться в самом начале, сразу после создания сервера и прослушивания порта и обязательно ДО создания роута с ответом, т.к. в каждом роуте у нас ечть метод res.render, который возвращает ответ обратно в браузер и после этого промежуточная функциональность не успеет отработать

    // для установки нормального логера morgan (см.: http://expressjs.com/en/resources/middleware/morgan.html) останавливаем серевр и вводим команду инсталяции: npm install morgan. После установки перезапускаем наш сервер и импортируем морган в модуль (вверху - const morgan = require('morgan')). 


    app.use(morgan(':method :url :status :res[content-length] - :response-time ms')); // заменили самописный консольный логер на нормальный. Строку, которую он будет передавать мы скопировали прямо из документации. Теперь припереходе по страницам мы будем видеть: метод, статус, длину контента, и вермя ответа в миллисекундах - действительно полезная информация, которая может помочь при отлове ошибок и проверке перфоманса сервера.

//-----// Когда мы добавляем статичные файлы в проект, по типу стилей или картинок, мы не можем получить к ним доступ. Если бы это работало, то пользователь мог бы получить доступ к любому файлу, хранящемуся на сервере. Поэтому по умолчанию Node.JS защищает все хранящиеся данные и для того, чтобы браузер мог получить статичные данные нам требуется это разрешить, т.е. нужно определить файлы и папки, к которым браузер может получить доступ и делается это созданием нового Middleware 

app.use(express.static('styles')); // Мы использует стандартный app.use внутрь которого положим express.static. Данный метод поможет добавить передаваемую папку в исключения, т.е. сделать ее общедоступной. Внутри мы определяем папку styles, т.е. непосредственно папку с нашими стилями.

// Помимо самописных Middleware мы можем использовать и сторонние, список самых часто используемых здесь: http://expressjs.com/en/resources/middleware.html   Среди них:

// body-parser - предназначен для чтения тела запроса
// compression - для того, чтобы в соответствии с передаваемыми аргументами осуществлять сжатие тела ответа
// cors - для работы с кросс-доменными запросами
// cookie-session - чтобы дополнительно в ответ устанавливать сессионные куки.ю для получения длополнительной информации
// morgan - нормальный логер


app.get('/', (req, res) => {
    const title = 'Home';
    res.render(createPath('index'), { title });
});

app.get('/contacts', (req, res) => {
    const title = 'Contacts';
    const contacts = [
        { name: 'YouTube', link: 'http://youtube.com/YauhenKavalchuk' },
        { name: 'Twitter', link: 'http://twitter.com/YauhenKavalchuk' },
        { name: 'GitHub', link: 'http://github.com/YauhenKavalchuk' },
    ]
    res.render(createPath('contacts'), { contacts, title });
});

app.get('/posts/:id', (req, res) => {
    const title = 'Post';
    res.render(createPath('post'), { title });
});

app.get('/posts', (req, res) => {
    const title = 'Posts';
    res.render(createPath('posts'), { title });
});

app.get('/add-post', (req, res) => {
    const title = 'Add Post';
    res.render(createPath('add-post'), { title });
});

app.get('/about-us', (req, res) => {
    res.redirect('/contacts');
})

app.use((req, res) => {
    const title = 'Error Page';
    res
        .status(404)
        .render(createPath('error'), { title });
})