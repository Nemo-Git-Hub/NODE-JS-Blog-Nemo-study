// здесь у нас происходит непосредственный вызов событий, за которыми мы следим

const EventEmitter = require("events"); //импортируем модуль событий в наш файл. Имя с большой буквы - значит это КЛАСС, на основании которого будем создавать экземпляры для отслеживания различных событий

//создаем класс Logger и наследуем его от EventEmitter:
class Logger extends EventEmitter {
  log = (msg) => {
    console.log(msg);
    this.emit("some_event", { id: 1, text: "Event test text!" }); //т.к. мы находимся внутри класса, который наследует от EventEmitter, поэтому можем обратиться к его унаследованному методу .emit через this
  };
} //создали класс-наследник, который наследуется от EventEmitter, тем самым получая все методы родителя, расширили его кастомными методами, после чего для создания и слежения за событиями используются экземпляры данного класса-потомка

module.exports = Logger; //создали экспорт данного класса

// 2-й ВАРИАНТ
//(не ремендован документацией ноды, но работает)

// const EventEmitter = require('events');
// const util = require('util'); //вариант с использованием модуля util. Для этого сначала импортируем его в файл

// class Logger {
//     log = (msg) => {
//         console.log(msg);
//         this.emit('some_event', { id: 1, text: 'Event test text!' });
//     }
// } //создали класс Logger c одним методом log

// util.inherits(Logger, EventEmitter); //используя метод .inherits расширяем данный класс классом EventEmitter, т.е. по сути делаем тоже самое наследование

// module.exports = Logger;
