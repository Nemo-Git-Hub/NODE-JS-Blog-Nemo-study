//console.log(global); //вывод в консоль глобального объекта global, чтобы посмотреть, что он из себя представляет

//создадим таймер, который сработает через 3 сек и выведет в консоль слово:
// setTimeout(() => {
//     console.log('Hello!');
// }, 3000);

// consol.log(__dirname); // с помощью данного глобального объекта мы можем получить доступ до главного исполняющего файла. В результате мы получаем путь до файла

// console.log(__filename); // возвращает весь путь до файла включая его имя и расширение

// глобальный объект process хранит очень много полезной и нужной информации по типу конфигурации, переменных среды, версий и т.д. К любому из параметров можно получить доступ и использовать его при разработке

// console.log(`Hello, ${process.argv[2]}`); // argv - это массив, который содержит аргументы командной строки: 0 - это node (1-й элемент), 1 - имя исполняемого JavaScript файла (2-й элемент). Если при вызове передать несколько аргументов (например число, строку и массив), то при запуске эти значения будут доступны в массиве argv, т.е. используя терминал, в выполняемый скрипт мы можем передать какие-то значения, после чего в самом скрипте мы их можем использовать. Например, передав в терминале команду: node global Nemo, получим результат: Hello, Nemo,т.к. в команде заложили вывести 3-й элемент массива argv[2]

// console.log(process.env); // самый часто используемый. В этот объект добавляются переменные окружения по типу develop or production и в зависимости от них запускаются разные варианты окружений. Или установить переменную Puth:3000 и слушать приложение на этом определенном порту

// еще один глобальныйобъект - url - с его помощью мы можем работать с получаемыми сервером url-адресами, осуществляя парсинг можно вытягивать из строки полезные данные, после чего работать с ними

const url = new URL("https://webDev.com/path/name#test"); // url - это конструктор, поэтому при создании внутрь него мы передаем адрес, Допишем произвольный путь path/name
console.log(url.hostname); // используя .hostname мы можем получить сведения о хосте
console.log(url.href); // получим полную ссылку
console.log(url.pathname); // используя .pathname мы легко можем его получить
console.log(url.hash); // дописав хэш в конце адреса, применяя соответствующие свойства, мы также получаем к нему доступ

// Таким образом, распаршивая строку url-адреса с помощью различных методов, у нас есть доступ ко всем составляющим для комфортной работы по написанию логики
